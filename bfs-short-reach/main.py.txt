# https://www.hackerrank.com/challenges/bfsshortreach/problem

from collections import deque

def bfs(n, m, edges, s):
    # Write your code here    
    '''n: number of nodes, m: number of edges, edges: edges, s: starting node'''
    distances = [float('inf')] * n
    distances[s-1] = 0
    checked = [False] * n
    checked[s-1] = True
    
    nodes_to_visit = deque([s-1])
    edges = [[x-1, y-1] for x, y in edges]
    graph = {i: [] for i in range(n)}
    weight = 6
    for start, end in edges:        
        graph[start].append(end)
        graph[end].append(start)
    
    while len(nodes_to_visit):
        node = nodes_to_visit.popleft()
        for neighboor in graph[node]:
            if checked[neighboor]:
                continue
            distances[neighboor] = distances[node] + weight
            nodes_to_visit.append(neighboor)
            checked[neighboor] = True
    
    distances = [parse_inf(d) for d in distances if d != 0]
    return distances
