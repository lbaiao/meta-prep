OPENING = { '[': ']', '{': '}', '(': ')' }
CLOSING = { ']': '[', '}': '{', ')': '(' }

class Node:
    def __init__(self, data, next=None):
        self.data = data
        self.next = next


class Stack:
    def __init__(self):
        self.top = None

    def push(self, data):
        node = Node(data)
        node.next = self.top
        self.top = node

    def pop(self):
        if self.top is None:
            return None
        data = self.top.data
        self.top = self.top.next
        return data

    def is_empty(self):
        return self.top is None


def handle_stack_data(stack, data):
    if data in CLOSING.keys():
        if stack.is_empty():
            return False
        elif stack.top.data == CLOSING[data]:
            stack.pop()
            return True
        else:
            return False
    else:
         stack.push(data)
         return True


def is_balanced(s: str):
    stack = Stack()
    for i in s:
        if not handle_stack_data(stack, i):
            return 'NO'
    return 'YES' if stack.top is None else 'NO'


if __name__ == '__main__':
    # in_file = open('./input09.txt', 'r')
    in_file = open('./input.txt', 'r')

    n = int(in_file.readline().strip())
    results = []
    for _ in range(n):
        seq = in_file.readline().strip()
        result = is_balanced(seq)
        print(result)
        results.append(result)

    in_file.close()
        
